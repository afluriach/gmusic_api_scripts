#!/opt/local/bin/python

import os
import json
import time
from gmusicapi import Musicmanager

record_fname = "upload_record.json"

files_to_upload = []
fails = []

def write_record():
    json.dump(uploaded, open(record_fname, 'w'))
#end

def notify(msg):
    os.system('terminal-notifier -message "%s"' % (msg,))
#end

def process_file_upload(music_file):
    #It's hard to make sure the JSON record gets cleanly written out. But it's easy to 
    #touch an empty *.uploaded file to symbolize that it's been uploaded.
    if music_file in uploaded or os.path.exists(music_file+'.uploaded'):
        print(music_file + " has already been uploaded.")
        return
    #end

    file_size = os.stat(music_file).st_size
    #The file on the filesystem is not the one that will be uploaded.
    #Extrapolate file size based on file length and 320kpbs encoding.
       
    print("Uploading %s, %.1f MB." % (music_file,file_size/1e6))
    start_time = time.time()
    if manager.upload(music_file, transcode_quality=0):
        elapsed = time.time() - start_time
        print("Uploaded %s in %.1f sec, %.1f KB/s." % (music_file,elapsed,file_size/elapsed/1e3))
        uploaded[music_file] = "true"
        open(music_file+'.uploaded', 'w').close()
        return True
    else:
        fails.append(music_file)
        notify(music_file + " failed to upload.")
    #end

#end


if(os.path.isfile(record_fname)):
    f = open(record_fname, 'r')
    uploaded = json.load(f)
else:
    uploaded = {}
#end

manager = Musicmanager();

if not manager.login():
    print("login failed!")
    exit()
#end

extensions = ['mp3', 'MP3', 'flac', 'm4a', 'ogg']

def is_music_file(path):
    for ext in extensions:
        if path.endswith(ext): return True
    #end
#end

for folder, _subs, files in os.walk('.', followlinks=True):
    did_upload = False
    print("Scanning folder " + folder)
    for file in files:
        if is_music_file(file):
            if process_file_upload(os.path.join(folder, file)): did_upload = True
        #end
    #end
    #Only notify if a music file was uploaded from this folder
    if did_upload:
        notify("Folder " + folder + " has finished uploading.")
    #end
#end

def print_fails():
    if fails:
        print("The follow files failed to upload: ")
        for file in fails:
            print(file)
        #end
    #end
#end

try:
    process_uploads()
except KeyboardInterrupt:
    print("Keyboard interrupt, quitting...")
except Exception:
    print(Exception)
    print("Fatal error.")
    notify("Upload music album halted with exception.")
finally:
    write_record()
    exit()
#end
